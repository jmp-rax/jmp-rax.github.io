[ { "title": "Universal Asynchronous Receiver Transceiver", "url": "/posts/universal-asynchronous-receiver-transceiver/", "categories": "UART, embedded, protocol, note", "tags": "", "date": "2022-01-10 22:22:00 -0500", "snippet": " This article is a personal note I took to help remember the gist of UARTUARTUniversal Asynchronous Receiver/Transmitter 1 0 1 0 1 0 1 0Tx ‾‾‾|_|‾|_|‾|_|‾|_|‾|_|‾‾‾‾ Rx ^ start bit ^^ stop bit Field Summary Wires 2 Speed 9600, 19200, 38400, 57600, 115200, 230400, 460800, 921600, 1000000, 1500000 Methods of Transmission Asynchronous Maximum Number of Masters 1 Maximum Number of Slaves 1 Overview The UART interface does not use a clock signal to synchronize the transmitter and receiver devices; it transmits data asynchronously. Instead of a clock signal, the transmitter generates a bitstream based on its clock signal while the receiver is using its internal clock signal to sample the incoming data. The point of synchronization is managed by having the same baud rate on both devices. Failure to do so may affect the timing of sending and receiving data that can cause discrepancies during data handling. The allowable difference of baud rate is up to 10% before the timing of bits gets too far off. https://www.analog.com/en/analog-dialogue/articles/uart-a-hardware-communication-protocol.htmlClock CycleThe clock cycle is defined as 1 / baud rate. The clock for both the sender and receiver need to be close enough for the duration of the conversation such that the drift doesnt affect the conversation. [CITE]Example 1/115200 HZ = 8.681 micro secondsStart BitIn UART the data transmission line is typically held at a high voltage level. When data is ready to be sent, the transmitter will pull the data transmission line low (ground) to signal the start of a UART Frame for one clock cycle.Be careful not to assume the first bit part of the data frame. Logic analyzers will sometimes struggle here and cause frame errors in the capture.Data FrameData frames can be between 5-8 bits long (9 if the parity bit is not used), In most cases the data is sent as LSB or least significant bit.ParityParity describes the evenness or oddness of a number. It can be used as a simple check to determine if any data changed in transmission. If the total of the message is even the parity bit is set to 0, if the total is odd it is set to 1.On the receiving end the receiver performs the same check to determine if the message changed in transmission.Stop BitThe transmission line is driven high for one to two clock cycles indicating the transmission has ended. The receiver will also know the transmission ended because the data frame is a fixed length. This will help detect overrun and underrun errors." }, { "title": "Serial Peripheral Interface", "url": "/posts/serial-peripheral-interface/", "categories": "SPI, embedded, protocol, note", "tags": "", "date": "2022-01-10 22:22:00 -0500", "snippet": " This article is a personal note I took to help remember the gist of SPISPISerial Peripheral Interface&amp;gt;&amp;gt; Traditional 4wire SPI &amp;lt;&amp;lt; Data being writtencs ‾‾‾‾|__________________|‾‾‾‾‾‾‾‾ csTx 0 1 0 1 0 1 0 1mosi ‾‾‾|_|‾|_|‾|_|‾|_|‾‾‾‾‾‾‾‾‾‾‾‾‾ sdiRx 1 0 1 0 1 0 1 0 miso ‾‾‾‾‾‾|_|‾|_|‾|_|‾|_|‾‾‾‾‾‾‾‾‾‾ sdoclock pulsesck ‾|_|‾|_|‾|_|‾|_|‾|_|‾|_|‾|_|‾|_ sckOverview Serial peripheral interface (SPI) is one of the most widely used interfaces between microcontroller and peripheral ICs such as sensors, ADCs, DACs, shift registers, SRAM, and others. This article provides a brief description of the SPI interface followed by an introduction to Analog Devices’ SPI enabled switches and muxes, and how they help reduce the number of digital GPIOs in system board design. https://www.analog.com/en/analog-dialogue/articles/introduction-to-spi-interface.htmlTraditional 4 wire SPI has four signals Clock (CLK) Chip Select (CS) Master out, Slave In (MOSI) Master In, Slave Out (MISO)Clock SignalThe clock signal is generated by the master and the slave is synchronized to the master. SPI Devices support much higher clock frequencies compared to I2C. Product data sheets should specify supported frequencies.Chip SelectChip select is used to select the slave. Normally this is performed by pulling a chip select wire from its normal high state low (ground).Data Transmission In SPI, the master can select the clock polarity and clock phase. The CPOL bit sets the polarity of the clock signal during the idle state. The idle state is defined as the period when CS is high and transitioning to low at the start of the transmission and when CS is low and transitioning to high at the end of the transmission. The CPHA bit selects the clock phase. Depending on the CPHA bit, the rising or falling clock edge is used to sample and/or shift the data. The master must select the clock polarity and clock phase, as per the requirement of the slave. Depending on the CPOL and CPHA bit selection, four SPI modes are available.See https://www.analog.com/en/analog-dialogue/articles/introduction-to-spi-interface.html for a configuration listMultislave ConfigurationRegular SPI Mode ┌───────────────────────────────────────&amp;gt;┐ |┌─────────────────────────&amp;gt;┐ ┌──┴───┐ _________ || ┌──┴───┐ | CS || CS0 ├&amp;gt;┘| |‾‾‾‾‾‾| | CS | ┌──&amp;gt;┤ SCLK || M CS1 ├&amp;gt;─┘┌────────&amp;gt;┤ CS | ┌──&amp;gt;┤ SCLK | |┌─&amp;gt;┤ SDI || A CS2 ├&amp;gt;──┘ ┌──&amp;gt;┤ SCLK | |┌─&amp;gt;┤ SDI | ||┌&amp;lt;┤ SDO || S | |┌─&amp;gt;┤ SDI | ||┌&amp;lt;┤ SDO | ||| |______|| T | ||┌&amp;lt;┤ SDO | ||| |______| |||| E SCLK ├&amp;gt;───┐ ||| |______| ||| |||| R MOSI ├&amp;gt;─┐ └────┴))──────────┴))──────────┘|| | MISO ├&amp;lt;┐└───────┴)───────────┴)───────────┘| ‾‾‾‾‾‾‾‾‾ └─────────┴────────────┴────────────┘Daisy Chain SPI Mode ┌───────────────────────────────────────&amp;gt;┐ |┌─────────────────────────&amp;gt;┐ ┌──┴───┐ _________ || ┌──┴───┐ | CS || CS0 ├&amp;gt;┘| |‾‾‾‾‾‾| | CS | ┌──&amp;gt;┤ SCLK || M CS1 ├&amp;gt;─┘┌────────&amp;gt;┤ CS | ┌──&amp;gt;┤ SCLK | |┌─&amp;gt;┤ SDI || A CS2 ├&amp;gt;──┘ ┌──&amp;gt;┤ SCLK | | | SDI ├&amp;lt;⌒⌒─&amp;lt;┤ SDO || S | | | SDI ├&amp;lt;⌒───┤ SDO | || |______|| T | | ┌&amp;lt;┤ SDO | | |______| ||| E SCLK ├&amp;gt;───┐ | | |______| | ||| R MOSI&amp;gt; ├&amp;gt;─┐ └────┴─)──────────┴────────────┘| | MISO&amp;lt; ├&amp;lt;┐└────────)────────────────────────┘ ‾‾‾‾‾‾‾‾‾ └─────────┘3 Wire SPIIn 3 Wire SPI, instead of being full duplex the transmission / receive line acts as half duplex with the input/output is shared or the peripheral device may not transmit.Quad SPIIn a Quad SPI mode, a master and its peripheral will have multiple data lines allowing for much faster data transmission than traditional 4 wire SPI. https://www.totalphase.com/blog/2020/05/what-are-the-differences-of-single-vs-dual-vs-quad-spi/" }, { "title": "rewriting git history", "url": "/posts/rewriting-git-history/", "categories": "git", "tags": "", "date": "2021-05-27 18:27:00 -0400", "snippet": "Rewriting Git HistoryThis is actually a repost of an older post I had written. ProlougeI recognized in my most recent git projects. I was using the wrong email / user information for my repositories. While annoying I figured this could be a learning event. Keep in mind rewriting git history in most situations is a bad idea. However This is an opportunity to dive further into the depths of git.git basicsLets start off by looking at how git handles version control.Lets take a look at the .git folder found at the root of any git project..├── branches├── COMMIT_EDITMSG├── config├── description├── HEAD├── hooks│   └── ...├── index├── info│   └── exclude├── logs│   ├── HEAD│   └── refs├── objects│   ├── ...│   ├── info│   └── pack└── refs ├── heads ├── remotes └── tags Heres a brief overview for more detailed information see the documentation: branches/ mostly deprecrated COMMIT_EDITMSG Essentially just a temporary file for storing the git commit message config contains all the settings and configuration values for a given git repository shadows the global configuration file, such that any value that is not set here will default from the global configuration file for more information see the git config documentation description used mostly by githooks not used by github, gitlab, ect HEAD namespace that references the current active branch hooks/ git hook scripts index the current index file for the repository essentially all the data needed to make a git tree object an awesome writeup can be found here logs stores changes made to refs objects object store for a given repositoryhttps://mincong.io/2018/04/28/git-index/ refs references for the repository such as tip-of-the-tree commit objects of a branch, tags, remotes, ect Rewriting the historyThe simplest way I’ve found to rewrite a git filter-branch. Basically this command can walk a list of branches and rewrite the history associated with them. This can be incredibily dangerous of course but since the repo I want to rewrite is owned solely by me it should be okay.So first things first, lets rewrite the config file to use a local username and a local email. This will prevent (at least in this branch) from me using the wrong email and username. If I wanted to update these globally I could use --global&amp;gt; $ git config user.name &quot;jmp-rax&quot;&amp;gt; $ git config user.email pop.rax.jmp.rax@gmail.com&amp;gt; $ cat .git/[core] repositoryformatversion = 0 filemode = true bare = false logallrefupdates = true[remote &quot;origin&quot;] url = git@github.com:jmp-rax/jmp-rax.github.io.git fetch = +refs/heads/*:refs/remotes/origin/*[branch &quot;master&quot;] remote = origin merge = refs/heads/master[branch &quot;gh-pages&quot;] remote = origin merge = refs/heads/gh-pages[user] name = jmp-rax email = pop.rax.jmp.rax@gmail.com Next we need to go and rewrite the history.I found a script that can be used for this purpose on git-tower.com. So lets give this a whirl.$ git filter-branch --env-filter &#39;WRONG_EMAIL=&quot;wrong@example.com&quot;NEW_NAME=&quot;New Name Value&quot;NEW_EMAIL=&quot;correct@example.com&quot;if [ &quot;$GIT_COMMITTER_EMAIL&quot; = &quot;$WRONG_EMAIL&quot; ]then export GIT_COMMITTER_NAME=&quot;$NEW_NAME&quot; export GIT_COMMITTER_EMAIL=&quot;$NEW_EMAIL&quot;fiif [ &quot;$GIT_AUTHOR_EMAIL&quot; = &quot;$WRONG_EMAIL&quot; ]then export GIT_AUTHOR_NAME=&quot;$NEW_NAME&quot; export GIT_AUTHOR_EMAIL=&quot;$NEW_EMAIL&quot;fi&#39; --tag-name-filter cat -- --branches --tagsHeres my (amended) git logs beforecommit 5f69458a1980590cd3a2057a0ccc956d754e3ea2 (HEAD -&amp;gt; gh-pages, origin/gh-pages)Author: My Name &amp;lt;myname@wrongemail.com&amp;gt;Date: Sun May 23 17:12:44 2021 -0400 initial updatescommit 233e09bc30ca85a06ca0fb79de46fabf91a0c7eaAuthor: My Name &amp;lt;myname@wrongemail.com&amp;gt;Date: Sun May 23 16:55:59 2021 -0400 updating the _config.ymlcommit e03d28942b61a9754938a118864d0c45fe5707f1Author: My Name &amp;lt;myname@wrongemail.com&amp;gt;Date: Sun May 23 16:23:15 2021 -0400 initial pages with jekyllHere is the after. Notice the commit sha’s changed, the history has completely been rewritten.commit f49dbd61f19090e2c0f4abf9edc6085e21cd88cc (HEAD -&amp;gt; gh-pages)Author: jmp-rax &amp;lt;pop.rax.jmp.rax@gmail.com&amp;gt;Date: Sun May 23 17:12:44 2021 -0400 initial updatescommit b79d68217f42015f0a5902193c229e7112783be6Author: jmp-rax &amp;lt;pop.rax.jmp.rax@gmail.com&amp;gt;Date: Sun May 23 16:55:59 2021 -0400 updating the _config.ymlcommit 57d1da70c0a300eab87f6f84cf2c41fd79fe45a0Author: jmp-rax &amp;lt;pop.rax.jmp.rax@gmail.com&amp;gt;Date: Sun May 23 16:23:15 2021 -0400 initial pages with jekyllNow if I perform a git push we will see something like the following:&amp;gt; $ git pushTo github.com:jmp-rax/jmp-rax.github.io.git ! [rejected] gh-pages -&amp;gt; gh-pages (non-fast-forward)error: failed to push some refs to &#39;git@github.com:jmp-rax/jmp-rax.github.io.git&#39;hint: Updates were rejected because the tip of your current branch is behindhint: its remote counterpart. Integrate the remote changes (e.g.hint: &#39;git pull ...&#39;) before pushing again.hint: See the &#39;Note about fast-forwards&#39; in &#39;git push --help&#39; for details.This is because since I rewrote all of the history our git history locally. Now the remote and our local branch are incompatible with one another. I will have to use the --force flag to push the repo regardless of what the remote thinks. If someone else had my repo checked out and I were to do this bad things can happen. Remember to apply the changes on all the branches using --all. In the example below I forgot to do that and had to push the master branch seperately.&amp;gt; $ git push --force Enumerating objects: 23, done.Counting objects: 100% (23/23), done.Delta compression using up to 4 threadsCompressing objects: 100% (22/22), done.Writing objects: 100% (23/23), 6.92 KiB | 708.00 KiB/s, done.Total 23 (delta 3), reused 0 (delta 0)remote: Resolving deltas: 100% (3/3), done.To github.com:jmp-rax/jmp-rax.github.io.git + 5f69458...f49dbd6 gh-pages -&amp;gt; gh-pages (forced update) " } ]
